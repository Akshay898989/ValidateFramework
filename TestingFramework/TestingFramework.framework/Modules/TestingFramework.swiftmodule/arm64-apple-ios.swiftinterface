// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TestingFramework
import Foundation
import Swift
@_exported import TestingFramework
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SSInAppViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor(unsafe) public var webViewHandler: ((WebKit.WKWebView?) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var closeButtonHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var submitButtonHandler: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public init(requestModel: TestingFramework.SSInAppRequestModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
@objc public class SSInAppRequestModel : ObjectiveC.NSObject {
  @objc public var contactInfo: [Swift.String : Any]?
  @objc public var metadata: [Swift.String : Any]?
  @objc public var triggerValue: Swift.String
  @objc public var subDomain: Swift.String
  @objc public init(contactInfo: [Swift.String : Any]? = nil, metadata: [Swift.String : Any]? = nil, triggerValue: Swift.String, subDomain: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SSInAppTokenManager : ObjectiveC.NSObject {
  @objc public static let shared: TestingFramework.SSInAppTokenManager
  @objc public func setToken(_ token: [Swift.String])
  public func getToken() -> [Swift.String]
  public func getEncodedToken() -> [Swift.String]
  @objc deinit
}
